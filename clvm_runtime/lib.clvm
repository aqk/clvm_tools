(
    ; boolean and macro
    (defmacro and ARGS
        (if ARGS
            (qq (if (unquote (f ARGS))
                (unquote (c and (r ARGS)))
                ()
                ))
            1)
    )

    ; concatenate two lists, yield a single new list
    (defun concat2 (X Y)
        (if Y
            (if X
                (c (f X) (concat2 (r X) Y))
                Y
            )
            X
        )
    )

    ; concatenate any number of lists (include 0 or 1)
    (defmacro concat LISTS
        (if LISTS
            (qq (concat2 (unquote (f LISTS)) (unquote (c concat (r LISTS)))))
            (q ())
        )
    )

    ; reverse a list, with accumulator (ie. parts already reversed)
    (defun reverse-acc (LIST ACC)
        (if LIST
            (reverse-acc (r LIST) (c (f LIST) ACC))
            ACC
        )
    )

    ; reverse a list
    (defmacro reverse (LIST)
        (qq (reverse-acc (unquote LIST) ()))
    )

    (defun split-list-acc (LIST1-HEAD LIST2-HEAD FIRST-HALF-ACC)
        (if (and LIST2-HEAD (r LIST2-HEAD))
            ; we can advance list1 by one and list2 by two
            (split-list-acc (r LIST1-HEAD) (r (r LIST2-HEAD)) (c (f LIST1-HEAD) FIRST-HALF-ACC))
            (list FIRST-HALF-ACC LIST1-HEAD)
        )
    )

    ; split a list in half, returning two lists
    ; of equal size (within one).
    ;
    ; WARNING: the first list is reversed

    (defun split-list (LIST)
        (split-list-acc LIST LIST ())
    )

    (defun merge-lists (A B)
        (if (and A B)
            (if (> (f B) (f A))
                (c (f A) (merge-lists (r A) B))
                (c (f B) (merge-lists A (r B)))
            )
            (if A
                A
                B
            )
        )
    )

    (defun sort-merge-list-pair ((A B))
        (merge-lists (sort A) (sort B))
    )

    ; sort a list
    (defun sort (LIST)
        (if (and LIST (r LIST))
            (sort-merge-list-pair (split-list LIST) ())
            LIST
        )
    )

    ; hash a tree
    (defun sha256tree0 (TREE)
        (if (l TREE)
            (sha256 2 (sha256tree0 (f TREE)) (sha256tree0 (r TREE)))
            (sha256 1 TREE)
        )
    )
)
