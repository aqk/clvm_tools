(
    ; concatenate two lists, yield a single new list
    (defun concat2 (X Y)
        (if Y
            (if X
                (c (f X) (concat2 (r X) Y))
                Y
            )
            X
        )
    )


    ; concatenate any number of lists (include 0 or 1)
    (defmacro concat LISTS
        (if LISTS
            (qq (concat2 (unquote (f LISTS)) (unquote (c concat (r LISTS)))))
            (q ())
        )
    )

    ; reverse a list, with accumulator (ie. parts already reversed)
    (defun reverse-acc (LIST ACC)
        (if LIST
            (reverse-acc (r LIST) (c (f LIST) ACC))
            ACC
        )
    )

    ; reverse a list
    (defmacro reverse (LIST)
        (qq (reverse-acc (unquote LIST) ()))
    )
)
